package openresty

import (
        "fmt"
        "net/http"
        "runtime"
        "os/exec"
	"os"
	"bufio"
	"strings"
        //"encoding/json"
)

func openrestyUninstall(w http.ResponseWriter, r *http.Request) {
             // Detect OS
        o := runtime.GOOS
        switch o {
        case "windows":
                //fmt.Printf("Windows")
                w.Header().Set("Content-Type", "application/json")
                //json.NewEncoder(w).Encode(os)
                fmt.Fprintf(w, `{"message": "Great, you are running %v."}`, o)
        case "darwin":
                // fmt.Println("MAC operating system")
                w.Header().Set("Content-Type", "application/json")
                // json.NewEncoder(w).Encode(os)
                fmt.Fprintf(w, `{"message": "Great, you are running %v."}`, o)
        case "linux":
                // fmt.Println("Linux")
                w.Header().Set("Content-Type", "application/json")
                //json.NewEncoder(w).Encode(os)
                //fmt.Fprintf(w, `{"message": "Great, you are running %v."}`, o)
                // Detect Linux distribution
                detectLinuxDist(w, r, o)
                // Install Openresty
                // InstallOpenresty()

        default:
                // fmt.Printf("%s.\n", os)
                //fmt.Printf("The operating system is not supported!")
                w.Header().Set("Content-Type", "application/json")
                fmt.Fprintf(w, `{"message": "The operating system is not supported!"}`)
        }

}

func detectLinuxDist(w http.ResponseWriter, r *http.Request, o string) {
        file, err := os.Open("/etc/os-release")
        if err != nil {
                panic(err)
        }
        defer file.Close()

        scanner := bufio.NewScanner(file)
        for scanner.Scan() {
                line := scanner.Text()
                if strings.HasPrefix(line, "NAME=") {
                        distro := strings.TrimPrefix(line, "NAME=")
                        distro = strings.Trim(distro, "\"")
                        // fmt.Println("Distribution:", distro)
                        // fmt.Println(distro)
                        w.Header().Set("Content-Type", "application/json")
                        //fmt.Fprintf(w, `{"message": "You are running %v Linux!"}`, distro)
                        detectLinuxFlavour(w, r, distro)
                        break
                }
        }
}

func detectLinuxFlavour (w http.ResponseWriter, r *http.Request, distro string) {
        switch distro {
        case "Ubuntu":
                //fmt.Fprintf(w, `{"Install Openresty on %v Linux......\n"}`, distro)
                ubuntuopenrestyUninstall(w, r)
                //installStatus()
                //http.HandleFunc("/v1/openresty_install_status", installStatus())
                //out, err := exec.Command("bash", "-c", "./install_openresty.sh").Output()
                //if err != nil {
                //   fmt.Printf("%s", err)
                //}
                //fmt.Printf("%s", out)
        case "CentOS":
                fmt.Printf("Install Openresty on %v.", distro)
        case "Amazon Linux":
                fmt.Printf("Install Openresty on %v.", distro)
        default:
                fmt.Println("The operating system is not supported!.")
        }
 }


func ubuntuopenrestyUninstall (w http.ResponseWriter, r *http.Request) {

        //output, err := exec.Command("openresty", "-v").CombinedOutput()
        _, err := exec.Command("openresty", "-v").CombinedOutput()
        if err != nil {
                //w.Header().Set("Content-Type", "application/json")
                w.WriteHeader(http.StatusOK)
                //fmt.Fprintf(w, `{"status": 200, "response": "OpenResty uninstallation started\n"}`)
		fmt.Fprintf(w, `{"Error: %v\n"}`, err)
		return
                //fmt.Println("OpenResty is not installed")
                //return
        } else {
                //w.Header().Set("Content-Type", "application/json")
                //w.WriteHeader(http.StatusOK)
                //fmt.Printf("Openresty is already installed.\n")
                //out, err := exec.Command("bash", "-c", "./openresty/install_openresty.sh").Output()
		_, err := exec.Command("bash", "-c", "./openresty/uninstall_openresty.sh").Output()
                if err != nil {
                        w.Header().Set("Content-Type", "application/json")
                        fmt.Printf("%s", err)
                        fmt.Fprintf(w, `{"%s"}`, err)

                }
                fmt.Fprintf(w, `{"status": 200, "response": "Successfully uninstalled Openresty"}`)
                //installStatus(w, r)
        }

        //out, err := exec.Command("bash", "-c", "./openresty/install_openresty.sh").Output()

        //if err != nil {
        //   fmt.Printf("%s", err)
        //}

        //fmt.Printf("%s", out)
        ////return

}
